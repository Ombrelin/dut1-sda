/**
* @file File.cpp
* Projet sem06-cours-Cpp1
* @author l'équipe pédagogique
* @version 2 - 13/01/10
* @brief Composant de file avec capacité paramétrée
* Structures de données et algorithmes - DUT1 Paris 5
*/

#include <cassert>
#include "File.h"

/**
* @brief initialiser une file vide
* la file est allouée en mémoire dynamique
* @see detruire, elle est à désallouer en fin d’utilisation
* @param[out] f : la file à initialiser
* @param[in] capa : capacité de la file (nb maximum d‘Itemfs stockés)
* @pre capa>0
*/
void initialiser(File& f, unsigned int capa) {
	assert(capa>0);
	initialiser(f.c, capa); // @see initialiser de ConteneurTD
	f.indPremier = 0;
	f.indProchain = 0;
	f.nb = 0;
}

/**
* @brief Désallouer une file
* @see initialiser, la file a déjà été allouée en mémoire dynamique
* @param[out] f : la file
*/
void detruire(File& f) {
	detruire(f.c); // @see detruire de ConteneurTD
}

/**
* @brief Test de file pleine
* @param[in] f : la file testée
* @return true si f est pleine, false sinon
*/
bool estPleine(const File& f) {
	return (f.nb == f.c.capacite); // @see type ConteneurTD 
}

/**
* @brief Test de file vide
* @param[in] f : la file testée
* @return true si f est vide, false sinon
*/
bool estVide(const File& f) {
	return (f.nb == 0);
}

/**
* @brief Lire l'Itemf en tête de file
* @param[in] f : la file
* @return la valeur de l'Itemf en tête de file
* @pre la file n’est pas vide
*/
Itemf tete(const File& f) {
	assert(!estVide(f));
	return lire(f.c, f.indPremier); // @see lire, dans ConteneurTD 
}

/**
* @brief Entrer un Itemf dans la file
* @param[in,out] f : la file
* @param[in] it : l'Itemf à entrer
* @pre f n’est pas pleine
*/
void entrer(File& f, const Itemf& it) {
	assert(!estPleine(f));
	ecrire(f.c, f.indProchain, it); //@see ecrire de ConteneurTD 
	f.indProchain = (f.indProchain + 1) % f.c.capacite;
	f.nb++;
}

/**
* @brief Sortir l’Itemf tête de file
* @param[in,out] f : la file
* @pre f n’est pas vide
*/
void sortir(File& f) {
	assert(!estVide(f));
	f.indPremier = (f.indPremier + 1) % f.c.capacite;;
	f.nb--;
}


